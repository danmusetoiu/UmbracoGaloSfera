@using Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Extensions;
@using Newtonsoft.Json;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;

@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.Products>

@{
    Layout = "master.cshtml";
}

<head>
    <meta charset="utf-8">
    <title>Leaflet Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
          integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
          crossorigin="">
    <style type="text/css">
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            width: 100vw;
            height: 100vh;
        }
    </style>
    <style>
        #map {
            width: 50%;
            height: 200px; 
            margin-top: 20px; 
            margin-left: 50px;
        }
    </style>
</head>

@Html.Partial("~/Views/Partials/SectionHeader.cshtml")


<script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
        integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
        crossorigin=""></script>

@{
    var list = Model.Children<Product>().Select(b => new { b.LocalizareEveniment.Marker.Latitude, b.LocalizareEveniment.Marker.Longitude, b.Name, b.WebsiteEveniment }).ToList();
}

<section>
    <div class="container text-center">

        @* <h1>Ultimele stiri</h1> *@


        <div class="row pe-5">
            <div class="col-lg-1"></div>
            <div class="col-lg-10 coloana-noutati">
                <div class="row">
                    <div class="col-6 coloana-noutati-stanga">
                        @foreach (Product stire in Model.Children<Product>())
                        {
                            <div class="row d-none stire-@stire.Id">

                                <div class="col-12">
                                    <div class="container d-flex p-0">
                                        <h3 class="text-albastru">@stire.ProductName </h3>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="container p-0 text-justify-interword">
                                        @stire.Description
                                    </div>
                                </div>
                                @* <div class="col-12">
                            @if (stire.FotoStire != null)
                            {
                            <img src="@stire.FotoStire.Url()" alt="@stire.Name" class="blog-image mh-20px" />
                            }
                            </div> *@
                                <div class="container text-justify-interword">
                                    @await Html.GetBlockGridHtmlAsync(stire, "bodyText")
                                </div>
                                <br />
                            </div>
                        }
                    </div>
                    <div class="col-1"></div>
                    <div class="col-4 coloana-noutati-dreapta">
                        @foreach (Product stire in Model.Children<Product>())
                        {
                            <div class="row stire-@stire.Id mb-42px me-4">
                                <div class="col-12  d-flex">
                                    <div class="container text-align-start p-0">
                                        <h3 class="text-albastru col-12"> @stire.ProductName </h3>
                                        <div class="col-12 text-justify-interword p-0">@stire.AdresaEveniment</div>
                                        <div class="col-12 p-0">@stire.UpdateDate.ToString("dd.MM.yyyy") | @stire.UpdateDate.ToString("HH:mm")</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-1"></div>
                </div>
                <div id="map" class="m-0 w-100" style="min-height:300px;"></div>
                <div id="calendar">
                    <div id="calendar-header">
                        <button onclick="changeMonth(-1)">&#10094;</button>
                        <span id="month-year"></span>
                        <button onclick="changeMonth(1)">&#10095;</button>
                    </div>
                    <div id="calendar-days">
                        <div class="day">Duminică</div>
                        <div class="day">Luni</div>
                        <div class="day">Marți</div>
                        <div class="day">Miercuri</div>
                        <div class="day">Joi</div>
                        <div class="day">Vineri</div>
                        <div class="day">Sâmbătă</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-1"></div>
        </div>


    </div>
</section>

@* 
<div class="container-calendar">
    <div class="month">
        <ul>
            <li class="prev">&#10094;</li>
            <li class="next">&#10095;</li>
            <li>
                August<br>
                <span style="font-size:10px">2021</span>
            </li>
        </ul>
    </div>

    <ul class="weekdays">
        <li>Mo</li>
        <li>Tu</li>
        <li>We</li>
        <li>Th</li>
        <li>Fr</li>
        <li>Sa</li>
        <li>Su</li>
    </ul>

    <ul class="days">
        <li>1</li>
        <li>2</li>
        <li>3</li>
        <li>4</li>
        <li>5</li>
        <li>6</li>
        <li>7</li>
        <li>8</li>
        <li>9</li>
        <li><span class="active">10</span></li>
        <li>11</li>
        <li>12</li>
        <li>13</li>
        <li>14</li>
        <li>15</li>
        <li>16</li>
        <li>17</li>
        <li>18</li>
        <li>19</li>
        <li>20</li>
        <li>21</li>
        <li>22</li>
        <li>23</li>
        <li>24</li>
        <li>25</li>
        <li>26</li>
        <li>27</li>
        <li>28</li>
        <li>29</li>
        <li>30</li>
        <li>31</li>
    </ul>

</div> *@
<script>
    function AfiseazaStireaSelectata(elementApasat) {
        if (elementApasat === undefined) {
            return;
        }
        const coloanaStanga = document.querySelector('.coloana-noutati-stanga');
        coloanaStanga.scrollTop = 0;
        const randuriStanga = coloanaStanga.querySelectorAll('.row');
        const stireAfisata = coloanaStanga.querySelectorAll('.row:not(.d-none)')[0];
        stireAfisata.classList.add('d-none');
        const identificatorStire = Array.from(elementApasat.classList).find(classname => classname.startsWith('stire-'));
        const stireDeAfisat = coloanaStanga.querySelectorAll('.row.' + identificatorStire)[0];
        stireDeAfisat.classList.remove('d-none');
    }
    window.addEventListener("load", (event) => {
        const coloanaStanga = document.querySelector('.coloana-noutati-stanga');
        const randuriStanga = coloanaStanga.querySelectorAll('.row');
        randuriStanga[0].classList.remove('d-none');
        const coloanaDreapta = document.querySelector('.coloana-noutati-dreapta');
        const randuriDreapta = coloanaDreapta.querySelectorAll('.row');
        randuriDreapta.forEach((element) => element.addEventListener('click', () => AfiseazaStireaSelectata(element)));
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Inițializează harta
        const map = L.map('map').setView([45.9432, 24.9668], 6); // Centru pe România (poți ajusta coordonatele)

        // Adaugă un strat de hartă OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Lista de locații din variabila `list` definită în Razor
        const locations = @Html.Raw(JsonConvert.SerializeObject(list));

        // Adaugă marcaje pentru fiecare locație
        locations.forEach(location => {
            if (location.Latitude && location.Longitude) {
                const marker = L.marker([location.Latitude, location.Longitude]).addTo(map);

                // Popup cu detalii despre eveniment
                marker.bindPopup(`
                        <b>${location.Name}</b><br>
                        <a href="${location.WebsiteEveniment}" target="_blank">${location.WebsiteEveniment}</a>
                    `);
            }
        });
    });
</script>
<script>
    const dateEvenimente = '@(string.Join(",",((Products)Model).Children().Select(p => p.CreateDate.ToString("yyyy-MM-dd")).ToArray()))';
    const dateArray = dateEvenimente.split(',');
    const monthNamesRo = [
        "Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie",
        "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"
    ];
    let currentMonth = new Date();

    function generateCalendar(date) {
        const monthYear = document.getElementById("month-year");
        const calendarDays = document.getElementById("calendar-days");
        calendarDays.innerHTML = `
          <div class="day">Duminică</div>
          <div class="day">Luni</div>
          <div class="day">Marți</div>
          <div class="day">Miercuri</div>
          <div class="day">Joi</div>
          <div class="day">Vineri</div>
              <div class="day">Sâmbătă</div>
      `;

        const year = date.getFullYear();
        const month = date.getMonth();
        const firstDay = new Date(year, month, 1).getDay();
        const lastDay = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        monthYear.textContent = monthNamesRo[date.getMonth()] + " " + date.getFullYear();


        for (let i = 0; i < firstDay; i++) {
            const emptyDay = document.createElement("div");
            calendarDays.appendChild(emptyDay);
        }

        for (let i = 1; i <= lastDay; i++) {
            const day = document.createElement("div");
            day.classList.add("day");
            day.textContent = i;

            const dayOfWeek = new Date(year, month, i).getDay();
            // if (dayOfWeek === 0 || dayOfWeek === 6) {
            //     day.classList.add("weekend");
            // }
            if (today.getFullYear() === year && today.getMonth() === month && today.getDate() === i) {
                day.classList.add("current-day");
            }

            const formattedDate = year + "-" + (month + 1).toString().padStart(2, '0') + "-" + i.toString().padStart(2, '0');
            if (dateArray.includes(formattedDate)) {
                day.classList.add("highlighted");
            }

            calendarDays.appendChild(day);
        }
    } 
    function changeMonth(delta) {
        currentMonth.setMonth(currentMonth.getMonth() + delta);
        generateCalendar(currentMonth);
    }

    function getDatesFromAspNet() {
        // This is a placeholder. In your ASP.NET code, you'll need to
        // render this JavaScript code with the actual dates from your
        // object list. See the ASP.NET example below.
        return [/* Dates will be inserted here by ASP.NET */];
    }

    generateCalendar(currentMonth); // Initial calendar generation
</script>