@using System.Web
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
    Layout = null;
    var rssNode = Model;
    var rootNode = rssNode.HasValue("rootNode") ?
                        rssNode.Value<IPublishedContent>("rootNode") :
                        rssNode.Parent;

    if (rootNode == null)
    {
        // Drop out if used in a location with no parent and also set no root has been set manually
        return;
    }

    Context.Response.ContentType = "application/rss+xml";

    string rootDomain = rootNode.Url(mode: UrlMode.Absolute);
    string rssUrl = rssNode.Url(mode: UrlMode.Absolute);
    string rssLanguage = System.Threading.Thread.CurrentThread.CurrentCulture.Name;

    var feedTitle = rssNode.HasValue("feedTitle") ?
                        rssNode.Value<string>("feedTitle") :
                        FallbackTextRenderer(rootNode, "title", rssNode);

    var feedSummary = ((rssNode.HasValue("feedDescription") ?
                        rssNode.Value<string>("feedDescription") :
                        FallbackTextRenderer(rootNode, "summary", rssNode)) ?? "").StripHtml();

    var feedDocTypes = rssNode.Value<string>("limitToDoctypes")?.Split(";", StringSplitOptions.RemoveEmptyEntries);

    // Helper method to handle falling back through multiple fields. Identifier can be date, title, summary or author
    // Done here rather than a controller so everything is fully self-contained
    string? FallbackTextRenderer(IPublishedContent currentNode, string identifier, IPublishedContent rssNode)
    {
        if (identifier == "date")
        {
            if (rssNode.HasValue("dateProperty") && rssNode.Value("dateProperty") != null)
            {
                string dateProperty = rssNode.Value<string>("dateProperty") ?? "";
                if (currentNode.Value<DateTime?>(dateProperty) != null)
                {
                    return currentNode.Value<DateTime>(dateProperty).ToUniversalTime().ToString("R");
                }
            }
            return currentNode.CreateDate.ToUniversalTime().ToString("R");
        }

        string[] fields = Array.Empty<string>();
        if (identifier == "title")
        {
            fields = new string[] { rssNode.Value<string>("titleProperty") ?? "", "title", "Name" };
        }

        if (identifier == "summary")
        {
            fields = new string[] { rssNode.Value<string>("summaryProperty") ?? "", "intro", "introText", "summary", "summaryText", "description", "descriptionText", "body", "bodyText" };
        }

        if (identifier == "author")
        {
            if (rssNode.HasValue("authorProperty"))
            {
                var authorProperty = rssNode.Value<string>("authorProperty") ?? "";
                if (currentNode.HasProperty(authorProperty))
                {
                    // Depending on type of property found for 'author picker' either get a field from a linked node, or from text on the current node
                    var propertyType = currentNode.GetProperty(authorProperty)?.PropertyType.EditorAlias;
                    if ((propertyType == "Umbraco.ContentPicker" || propertyType == "Umbraco.MemberPicker") && currentNode.Value<IPublishedContent>(authorProperty) != null)
                    {
                        currentNode = currentNode.Value<IPublishedContent>(authorProperty) ?? currentNode;
                        fields = new string[] { "Name" };
                    }
                    else if (propertyType == "Umbraco.TextBox")
                    {
                        fields = new string[] { authorProperty };
                    }
                }
            }
            else
            {
                return currentNode.CreatorName();    
            }
        }

        foreach (var fieldAlias in fields.Where(alias => !string.IsNullOrEmpty(alias)))
        {
            if (fieldAlias == "Name")
            {
                return currentNode.Name;
            }
            if (currentNode.HasValue(fieldAlias))
            {
                return currentNode.Value<string>(fieldAlias);
            }
        }

        return "";
    }

}<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <atom:link href="@(rssUrl)" rel="self" />
        <title>@(feedTitle)</title>
        @if (!string.IsNullOrEmpty(feedSummary))
        {
            <description>@(feedSummary)</description>
        }
        <link>@(rootDomain)</link>
        <language>@(rssLanguage)</language>
        @foreach (var currentNode in rootNode.Descendants())
        {
            if (currentNode.Value<bool>("excludeFromRss") == false &&
                    currentNode.ContentType.Alias != Model.ContentType.Alias &&
                    (feedDocTypes == null || !feedDocTypes.Any() || feedDocTypes.Contains(rssNode.ContentType.Alias))
               )
            {
                var itemTitle = FallbackTextRenderer(currentNode, "title", Model);
                var itemSummary = FallbackTextRenderer(currentNode, "summary", Model);
                var itemPublishDate = FallbackTextRenderer(currentNode, "date", Model);
                var itemAuthor = FallbackTextRenderer(currentNode, "author", Model);
                var itemUrl = currentNode.Url(mode: UrlMode.Absolute);
                <item>
                    <title>@(itemTitle)</title>
                    <description><![CDATA[@Html.Raw(itemSummary)]]></description>
                    <guid>@(itemUrl)</guid>
                    @(Html.Raw(String.Format("{0}{1}{2}", "<link>", itemUrl, "</link>")))
                    <pubDate>@(itemPublishDate)</pubDate>
                    <dc:creator>@(itemAuthor)</dc:creator>
                </item>
            }
        }
    </channel>
</rss>