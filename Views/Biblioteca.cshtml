@using HtmlAgilityPack
@using Umbraco.Cms.Core.Strings
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.Biblioteca>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
    Layout = "master.cshtml";
}

@Html.Partial("~/Views/Partials/SectionHeader.cshtml")


<div class="container h-99">
    <div class="row h-100">
        <div class="col-1 col-lg-1">
        </div>
        <div class="col-12 col-lg-5">
            @*
            <div class="d-flex justify-content-around" style="text-align:end; flex-direction:column;">
            <div>
            <h1 style="font-size:80px;"><strong>BIBLIOTECA</strong></h1><br />
            </div>
            <div>
            <h5 style="align-content:end">DOCUMENTE DE INTERES</h5>
            </div>

            </div>
            *@
            <div class="h-100 d-flex align-items-center">
                <img src="/media/ef2fxsln/biblioteca.svg" style="width:80%;" />
            </div>
        </div>
        <div class="col-12 col-lg-5 lh-15 fw-bold h-100  d-flex flex-column justify-content-between pb-5" id="item-container">
            <div>
                @foreach (var item in Model.Children.ToList())
                {
                    <div class="row item" style="display: none;">
                        <div class="col-1 p-2 pt-1">
                            <img src="/media/asxdhspf/iconita-carte4.svg" />
                        </div>
                        <div class="col-11">
                            @{
                                var richText = item.Value<IHtmlEncodedString>("carteContinut");

                                string href = string.Empty;
                                if (richText != null)
                                {
                                    var htmlDoc = new HtmlDocument();
                                    htmlDoc.LoadHtml(richText.ToString());

                                    var pdfLink = htmlDoc.DocumentNode.SelectSingleNode("//a[contains(@href, '.pdf')]");
                                    if (pdfLink != null)
                                    {
                                        href = pdfLink.GetAttributeValue("href", "");
                                    }
                                }
                                @if (href != string.Empty)
                                    {
                                    <a href="@href" class="text-nedecorat text-negru">
                                        <h5 style="font-weight:900;" class="pb-1 text-nedecorat">
                                    @item.Value("carteTitlu") 
                                        <img alt="Descărcare document" src="/media/ahjontgf/icon-download.svg" style="height:1.5rem;" />
                                        </h5>
                                    </a>
                                }
                                else
                                {

                                    <h5 style="font-weight:900;" class="pb-1">
                                        @item.Value("carteTitlu")
                                    </h5>
                                }
                            }
                            <span>
                                @{
                                    string modifiedContent = System.Text.RegularExpressions.Regex.Replace(item.Value<IHtmlEncodedString>("carteContinut").ToString(), "<a.*?>.*?</a>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                                    @Html.Raw(modifiedContent)
                                    ;
                                }
                            </span>
                        </div>
                    </div>
                }
            </div>


            <!-- Navigare paginare -->
            <div class="d-flex justify-content-center align-items-center" id="pagination-controls">
                <span class="buton-schimbare-pagina active" data-page="1">1</span>
                @for (int i = 2; i <= Math.Ceiling((double)(Model.Children.Count()) / 3); i++)
                {
                    <span class="buton-schimbare-pagina" data-page="@i">@i</span>
                }
            </div>

            <br />
        </div>
    </div>
    <div class="col-1 col-lg-1"> </div>
</div>

@* <div class="container text-center">
	@Model.ContinutulPaginii
</div> *@

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const items = document.querySelectorAll('.item');
        const paginationControls = document.querySelectorAll('.buton-schimbare-pagina');
        const itemsPerPage = 3;

        function showPage(pageNumber) {
            // Ascundem toate item-urile
            items.forEach((item, index) => {
                item.style.display = "none";
                if (index >= (pageNumber - 1) * itemsPerPage && index < pageNumber * itemsPerPage) {
                    item.style.display = "flex";
                }
            });

            // Actualizăm stilurile pentru pagină activă
            paginationControls.forEach(control => control.classList.remove('active'));
            paginationControls[pageNumber - 1].classList.add('active');
        }

        // Adăugăm evenimente click pentru butoane
        paginationControls.forEach(control => {
            control.addEventListener('click', function () {
                const pageNumber = parseInt(this.dataset.page);
                showPage(pageNumber);
            });
        });

        // Afișăm prima pagină implicit
        showPage(1);
    });
</script>